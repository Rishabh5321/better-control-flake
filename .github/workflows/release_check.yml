name: Update better-control

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight
  workflow_dispatch: # Allow manual triggering

jobs:
  check-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Get current version info
        id: current
        run: |
          CURRENT_VERSION=$(grep -oP 'version = "\K[^"]+' flake.nix)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check latest release
        id: latest
        run: |
          python <<EOF
          import requests
          from bs4 import BeautifulSoup
          import os

          url = "https://github.com/quantumvoid0/better-control/releases"
          response = requests.get(url)
          soup = BeautifulSoup(response.text, 'html.parser')
          
          # Find the latest release tag
          release_tag = soup.find('a', {'href': lambda x: x and '/releases/tag/' in x}).text.strip()
          version = release_tag.replace('v', '')
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"latest_version={version}", file=f)
          EOF

      - name: Compare versions
        id: compare
        run: |
          if [ "${{ steps.current.outputs.current_version }}" != "${{ steps.latest.outputs.latest_version }}" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Get SHA256 hash
        if: steps.compare.outputs.update_available == 'true'
        id: prefetch
        run: |
          VERSION="${{ steps.latest.outputs.latest_version }}"
          URL="https://github.com/quantumvoid0/better-control/archive/refs/tags/${VERSION}.zip"
          
          # Download the file and calculate SHA256
          SHA256=$(curl -sL "$URL" | sha256sum | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

      - name: Setup branch
        if: steps.compare.outputs.update_available == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME="update/better-control-${{ steps.latest.outputs.latest_version }}"
          
          # Check if branch exists locally
          if git show-ref --quiet refs/heads/"$BRANCH_NAME"; then
            git checkout "$BRANCH_NAME"
            git fetch origin main
            git reset --hard origin/main
          else
            # Check if branch exists remotely
            if git ls-remote --exit-code --heads origin "$BRANCH_NAME"; then
              git fetch origin "$BRANCH_NAME"
              git checkout -b "$BRANCH_NAME" origin/"$BRANCH_NAME"
              git fetch origin main
              git rebase origin/main
            else
              # Create new branch from main
              git fetch origin main
              git checkout -b "$BRANCH_NAME" origin/main
            fi
          fi

      - name: Update flake.nix
        if: steps.compare.outputs.update_available == 'true'
        run: |
          VERSION="${{ steps.latest.outputs.latest_version }}"
          SHA256="${{ steps.prefetch.outputs.sha256 }}"
          
          # Create backup of original file
          cp flake.nix flake.nix.bak
          
          # Update version only
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" flake.nix
          
          # Update SHA256 only (preserving ${version} in URL)
          sed -i "s|sha256 = \".*\"|sha256 = \"${SHA256}\"|" flake.nix
          
          # Verify changes were actually made
          if cmp -s flake.nix flake.nix.bak; then
            echo "No changes detected after updates!"
            exit 1
          fi

      - name: Commit changes
        if: steps.compare.outputs.update_available == 'true'
        run: |
          git add flake.nix
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update better-control to ${{ steps.latest.outputs.latest_version }}"
            echo "Changes committed successfully"
          else
            echo "No changes to commit"
            exit 1
          fi

      - name: Push changes
        if: steps.compare.outputs.update_available == 'true'
        run: |
          BRANCH_NAME="update/better-control-${{ steps.latest.outputs.latest_version }}"
          git push origin "$BRANCH_NAME" --force
          echo "Branch pushed successfully"

      - name: Create Pull Request
        if: steps.compare.outputs.update_available == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update better-control to ${{ steps.latest.outputs.latest_version }}"
          body: "Automated update to version ${{ steps.latest.outputs.latest_version }}"
          branch: update/better-control-${{ steps.latest.outputs.latest_version }}
          base: main
          delete-branch: false  # Don't delete branch automatically
          draft: false