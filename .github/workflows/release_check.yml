name: Update better-control version

on:
  schedule:
    - cron: '0 * * * *'  
  workflow_dispatch:

jobs:
  update-better-control:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Get current and latest versions
        id: versions
        run: |
          # Get current version from package.nix
          CURRENT_VERSION=$(grep -oP 'version = "\K[0-9.]+(?=";)' package.nix | tail -n1)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          
          # Get latest version from GitHub
          LATEST_VERSION=$(curl -s https://api.github.com/repos/quantumvoid0/better-control/releases/latest | jq -r .tag_name)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          
          # Compare versions
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "No update available (current: $CURRENT_VERSION, latest: $LATEST_VERSION)"
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          else
            echo "Update available (current: $CURRENT_VERSION, latest: $LATEST_VERSION)"
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
          fi

      - name: Update version in package.nix
        if: env.UPDATE_NEEDED == 'true'
        run: |
          # Remove the old duplicate version line if it exists
          sed -i '/^version = "[0-9.]*";$/d' package.nix
          
          # Add the new version after "pname = "better-control";"
          sed -i '/pname = "better-control";/a version = "'$LATEST_VERSION'";' package.nix
          
          # Update the tag line
          sed -i "s/tag = [^;]*;/tag = version;/" package.nix

      - name: Update hash in package.nix
        if: env.UPDATE_NEEDED == 'true'
        run: |
          # Get the new hash using nix-prefetch-url
          BASE_HASH=$(nix-prefetch-url --unpack "https://github.com/quantumvoid0/better-control/archive/refs/tags/$LATEST_VERSION.tar.gz" 2>/dev/null)
          
          # Convert to SRI format with sha256- prefix
          SRI_HASH=$(nix hash to-sri --type sha256 "$BASE_HASH")
          
          # Update the hash in package.nix
          sed -i "s|hash = \"[^\"]*\";|hash = \"$SRI_HASH\";|" package.nix
          
          # Print the result for debugging
          echo "Updated version to $LATEST_VERSION with hash $SRI_HASH"

      - name: Commit changes
        if: env.UPDATE_NEEDED == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Always create a new branch or reset existing one
          git checkout -B update-better-control-$LATEST_VERSION
          git add package.nix
          git commit -m "Update better-control to $LATEST_VERSION"
          
          # Force push to ensure the branch is updated
          git push --force origin update-better-control-$LATEST_VERSION
          
          # If push was successful, we know the branch exists now
          echo "BRANCH_UPDATED=true" >> $GITHUB_ENV

      - name: Check for existing PR
        if: env.UPDATE_NEEDED == 'true' && env.BRANCH_UPDATED == 'true'
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if PR already exists
          PR_EXISTS=$(gh pr list --head "update-better-control-$LATEST_VERSION" --json number --jq 'length')
          echo "PR_EXISTS=$PR_EXISTS" >> $GITHUB_ENV
          if [ "$PR_EXISTS" -gt 0 ]; then
            echo "PR already exists for this update"
          else
            echo "No existing PR found"
          fi

      - name: Create Pull Request
        if: env.UPDATE_NEEDED == 'true' && env.BRANCH_UPDATED == 'true' && env.PR_EXISTS == '0'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --title "Update better-control to $LATEST_VERSION" \
            --body "This updates better-control to version $LATEST_VERSION." \
            --head update-better-control-$LATEST_VERSION \
            --base main

      - name: Skip update or PR creation
        if: env.UPDATE_NEEDED == 'false' || (env.UPDATE_NEEDED == 'true' && env.PR_EXISTS != '0')
        run: |
          if [ "$UPDATE_NEEDED" = "false" ]; then
            echo "No update needed - current version ($CURRENT_VERSION) is up-to-date"
          elif [ "$PR_EXISTS" != "0" ]; then
            echo "PR already exists for version $LATEST_VERSION - skipping PR creation"
          fi