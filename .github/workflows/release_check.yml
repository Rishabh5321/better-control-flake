# .github/workflows/update-better-control.yml
name: Update better-control commit version

on:
  schedule:
    # Runs hourly (adjust as needed, e.g., '0 8 * * *' for daily at 8 AM UTC)
    - cron: "0 * * * *"
  workflow_dispatch: # Allows manual triggering

jobs:
  update-better-control:
    runs-on: ubuntu-latest
    # Prevent multiple runs for the same commit/event
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history for accurate version comparison and branch operations
          fetch-depth: 0

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          # Use nixpkgs-unstable channel for potentially newer tools
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install dependencies (using Nix)
        run: |
          # Install necessary tools using nix profile for better isolation
          nix profile install nixpkgs#gh nixpkgs#nix-prefetch-github nixpkgs#jq nixpkgs#gnused nixpkgs#gnugrep

          # Add Nix binaries to PATH for subsequent steps
          echo "$HOME/.nix-profile/bin" >> $GITHUB_PATH
          # Verify installation
          gh --version
          nix-prefetch-github --version
          jq --version
          sed --version || true # gnu sed might not have --version
          grep --version || true # gnu grep might not have --version

      - name: Get current and latest commit SHAs
        id: versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get current commit hash (rev) from package.nix
          CURRENT_COMMIT_SHA=$(grep -oP 'version\s*=\s*"\K[^"]+' package.nix || echo "0000000000000000000000000000000000000000") # Dummy hash if not found
          echo "Current commit SHA found in package.nix: $CURRENT_COMMIT_SHA"
          echo "CURRENT_COMMIT_SHA=$CURRENT_COMMIT_SHA" >> $GITHUB_ENV

          echo "Fetching latest commit SHA from 'main' branch..."
          # Fetch the SHA of the latest commit on the 'main' branch
          LATEST_COMMIT_SHA=$(gh api repos/quantumvoid0/better-control/commits/main --jq '.sha')

          if [ -z "$LATEST_COMMIT_SHA" ] || [ "$LATEST_COMMIT_SHA" == "null" ]; then
            echo "::error::Could not extract latest commit SHA from GitHub API response for 'main' branch."
            exit 1
          fi

          echo "Latest commit SHA from 'main' branch: $LATEST_COMMIT_SHA"
          echo "LATEST_COMMIT_SHA=$LATEST_COMMIT_SHA" >> $GITHUB_ENV

          if [ "$CURRENT_COMMIT_SHA" = "$LATEST_COMMIT_SHA" ]; then
            echo "better-control is up-to-date with 'main' branch ($CURRENT_COMMIT_SHA)."
            echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
          else
            echo "Update needed: $CURRENT_COMMIT_SHA -> $LATEST_COMMIT_SHA"
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV

      - name: Check for existing Pull Request
        id: check_pr
        if: env.UPDATE_NEEDED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Use LATEST_COMMIT_SHA for the branch name
          BRANCH_NAME: "update-better-control-commit-${{ env.LATEST_COMMIT_SHA }}"
        run: |
          echo "Checking for existing open PR for branch: $BRANCH_NAME"
          # Assuming you want to merge these updates into your 'main' branch
          EXISTING_PR_URL=$(gh pr list --head "$BRANCH_NAME" --base main --state open --json url --jq '.[0].url')

          if [ -n "$EXISTING_PR_URL" ]; then
            echo "::warning::An open pull request already exists for branch $BRANCH_NAME: $EXISTING_PR_URL"
            echo "Skipping update and PR creation steps."
            echo "PR_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No existing open PR found for branch $BRANCH_NAME."
            echo "PR_EXISTS=false" >> $GITHUB_ENV

      - name: Update commit SHA and hash
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false'
        env:
          # Pass LATEST_COMMIT_SHA to this step's environment
          LATEST_COMMIT_SHA: ${{ env.LATEST_COMMIT_SHA }}
        run: |
          echo "Updating package.nix to commit SHA (rev) $LATEST_COMMIT_SHA"

          # Update 'version' (rev) string using GNU sed
          sed -i -E "s@(version\s*=\s*\")[^\"]+@\1${LATEST_COMMIT_SHA}@" package.nix
          echo "Version (rev) updated in package.nix"

          # Run nix-prefetch-github with the LATEST_COMMIT_SHA
          echo "Running: nix-prefetch-github quantumvoid0 better-control --rev $LATEST_COMMIT_SHA"
          PREFETCH_OUTPUT=$(nix-prefetch-github quantumvoid0 better-control --rev "$LATEST_COMMIT_SHA" 2>&1)
          echo "Prefetch output:"
          echo "$PREFETCH_OUTPUT"

          NEW_HASH=""
          if echo "$PREFETCH_OUTPUT" | jq -e .hash > /dev/null 2>&1; then
            NEW_HASH=$(echo "$PREFETCH_OUTPUT" | jq -r .hash)
            echo "Extracted hash via jq: $NEW_HASH"
          else
            echo "::warning::nix-prefetch-github did not produce valid JSON output. Attempting legacy extraction."
            LEGACY_HASH=$(echo "$PREFETCH_OUTPUT" | grep -oP 'sha256-[a-zA-Z0-9/+]+=*')
            if [ -n "$LEGACY_HASH" ]; then
              NEW_HASH=$(echo "$LEGACY_HASH" | head -n 1)
              echo "Extracted legacy hash via grep: $NEW_HASH"
            else
              echo "::error::Failed to extract hash from prefetch output (JSON and Legacy methods failed)."
              echo "Output was: $PREFETCH_OUTPUT"
              exit 1
            fi
          fi

          if [[ "$NEW_HASH" =~ ^sha256-[A-Za-z0-9+/]+={0,2}$ ]]; then
            echo "Validated hash format: $NEW_HASH"
          else
            echo "::error::Extracted value '$NEW_HASH' does not look like a valid sha256 hash."
            exit 1
          fi

          # Update hash using GNU sed
          sed -i -E "s|(hash\s*=\s*\")[^\"]+(\";)|\1${NEW_HASH}\2|" package.nix

          if grep -q "hash = \"$NEW_HASH\";" package.nix; then
            echo "Successfully updated hash in package.nix"
          else
            echo "::error::Failed to verify hash update in package.nix using sed."
            echo "Expected hash line: hash = \"$NEW_HASH\";"
            echo "File content after attempted update:"
            cat package.nix
            exit 1
          fi

      - name: Commit and push changes
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false'
        env:
          LATEST_COMMIT_SHA: ${{ env.LATEST_COMMIT_SHA }}
          BRANCH_NAME: "update-better-control-commit-${{ env.LATEST_COMMIT_SHA }}"
        run: |
          echo "Configuring Git user..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          echo "Checking out branch $BRANCH_NAME..."
          git checkout -B "$BRANCH_NAME"

          echo "Adding changes..."
          git add package.nix

          if git diff --staged --quiet; then
             echo "No changes detected in package.nix after update. Skipping commit and push."
             echo "CHANGES_PUSHED=false" >> $GITHUB_ENV
          else
             echo "Committing changes..."
             git commit -m "feat: Update better-control to latest 'main' commit ${{ env.LATEST_COMMIT_SHA }}" -m "Automatic update via GitHub Actions, using latest commit from 'main' branch."

             echo "Pushing changes to origin/$BRANCH_NAME..."
             git push -f origin "$BRANCH_NAME"
             echo "Changes pushed successfully."
             echo "CHANGES_PUSHED=true" >> $GITHUB_ENV
          fi

      - name: Create Pull Request
        if: env.UPDATE_NEEDED == 'true' && env.PR_EXISTS == 'false' && env.CHANGES_PUSHED == 'true'
        uses: actions/github-script@v7
        env:
          CURRENT_COMMIT_SHA: ${{ env.CURRENT_COMMIT_SHA }}
          LATEST_COMMIT_SHA: ${{ env.LATEST_COMMIT_SHA }}
          BRANCH_NAME: "update-better-control-commit-${{ env.LATEST_COMMIT_SHA }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { CURRENT_COMMIT_SHA, LATEST_COMMIT_SHA, BRANCH_NAME } = process.env;
            if (!LATEST_COMMIT_SHA || !BRANCH_NAME || !CURRENT_COMMIT_SHA) {
              core.setFailed('Required environment variables (CURRENT_COMMIT_SHA, LATEST_COMMIT_SHA, BRANCH_NAME) were not set for PR creation.');
              return;
            }

            const baseBranch = 'main'; // <<< IMPORTANT: This is the branch where you want the PR to be merged into >>>
            const title = `feat: Update better-control to latest 'main' commit ${LATEST_COMMIT_SHA.substring(0, 7)}`;
            const body = `This PR automatically updates the \`better-control\` package from commit \`${CURRENT_COMMIT_SHA.substring(0, 7)}\` to \`${LATEST_COMMIT_SHA.substring(0, 7)}\`.

            Full commit SHAs:
            - Old: \`${CURRENT_COMMIT_SHA}\`
            - New: \`${LATEST_COMMIT_SHA}\`

            This update fetches the latest commit from the \`main\` branch of the \`quantumvoid0/better-control\` repository.

            Changes generated by GitHub Actions workflow.`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log(`Attempting to create Pull Request:`);
            console.log(`  Title: ${title}`);
            console.log(`  Head: ${owner}:${BRANCH_NAME}`);
            console.log(`  Base: ${baseBranch}`);

            try {
              const { data: existingPulls } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'open',
                head: `${owner}:${BRANCH_NAME}`,
                base: baseBranch,
              });

              if (existingPulls.length > 0) {
                console.log(`::warning::Pull request from ${BRANCH_NAME} to ${baseBranch} already exists: ${existingPulls[0].html_url}`);
                console.log('Skipping new PR creation.');
              } else {
                console.log('No existing open PR found. Creating a new one...');
                const { data: pullRequest } = await github.rest.pulls.create({
                  owner,
                  repo,
                  title,
                  head: BRANCH_NAME,
                  base: baseBranch,
                  body: body,
                });
                console.log(`Pull request created successfully: ${pullRequest.html_url}`);
              }
            } catch (error) {
              if (error.message.includes("No commit found for the ref") || error.message.includes("422")) {
                  console.warn(`Could not create PR. This might be because the branch '${BRANCH_NAME}' wasn't pushed (no changes detected?) or another issue occurred. Error: ${error.message}`);
              } else {
                  core.setFailed(`Failed to create or check for pull request for branch ${BRANCH_NAME}: ${error.message}`);
              }
            }
