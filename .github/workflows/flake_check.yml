name: flake_check

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  flake-checks:
    name: flake_check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          install_url: https://nixos.org/nix/install
          extra_nix_config: |
            auto-optimise-store = true
            experimental-features = nix-command flakes
            # Ensure download-buffer-size is an integer, not a float
            download-buffer-size = 500000000

      - name: Setup Cachix
        uses: cachix/cachix-action@v16
        with:
          name: rishabh5321
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Run flake check and capture logs
        # Use set +e so the step doesn't fail immediately on non-zero exit code
        # We will check the exit code manually.
        run: |
          set +e
          echo "Running nix flake check..."
          nix flake check 2>&1 | tee flake_check.log
          EXIT_CODE=$?
          
          echo "Flake check exited with code: $EXIT_CODE"
          echo "FLAKE_CHECK_EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV

          # Filter out the specific warning and save to a new file for reporting
          grep -v "The check omitted these incompatible systems:" flake_check.log > flake_check_filtered.log
          
          # Set status based on exit code, not grep
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "FLAKE_CHECK_STATUS=passed" >> $GITHUB_ENV
          else
            echo "FLAKE_CHECK_STATUS=failed" >> $GITHUB_ENV
            # Mark workflow to fail if check failed
            echo "WORKFLOW_SHOULD_FAIL=true" >> $GITHUB_ENV
          fi


      - name: Run flake install and capture logs
        # Use set +e so the step doesn't fail immediately on non-zero exit code
        # We will check the exit code manually.
        run: |
          set +e
          echo "Running nix profile install..."
          nix profile install .#better-control 2>&1 | tee flake_install.log
          EXIT_CODE=$?

          echo "Flake install exited with code: $EXIT_CODE"
          echo "FLAKE_INSTALL_EXIT_CODE=$EXIT_CODE" >> $GITHUB_ENV

          # Filter out the specific warning (less likely here but for consistency)
          grep -v "The check omitted these incompatible systems:" flake_install.log > flake_install_filtered.log

          # Set status based on exit code, not grep
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "FLAKE_INSTALL_STATUS=passed" >> $GITHUB_ENV
          else
            echo "FLAKE_INSTALL_STATUS=failed" >> $GITHUB_ENV
            # Mark workflow to fail if install failed
            echo "WORKFLOW_SHOULD_FAIL=true" >> $GITHUB_ENV
          fi

      - name: Debug Filtered Logs
        run: |
          echo "--- Filtered Flake Check Log (excluding incompatible systems warning) ---"
          cat flake_check_filtered.log || echo "(Log file not found or empty)"
          echo "-----------------------------------------------------------------------"
          echo "--- Filtered Flake Install Log (excluding incompatible systems warning) ---"
          cat flake_install_filtered.log || echo "(Log file not found or empty)"
          echo "-------------------------------------------------------------------------"


      - name: Send Telegram Notification
        if: always()
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          REPO_NAME="${{ github.repository }}"

          # Use the filtered logs for the message content
          FLAKE_CHECK_LOG_CONTENT=$(cat flake_check_filtered.log 2>/dev/null | head -n 15 | perl -pe 's/\n/%0A/g')
          FLAKE_INSTALL_LOG_CONTENT=$(cat flake_install_filtered.log 2>/dev/null | head -n 15 | perl -pe 's/\n/%0A/g')

          # Add placeholder if logs are empty or file doesn't exist
          FLAKE_CHECK_LOG="${FLAKE_CHECK_LOG_CONTENT:-No relevant log messages.}"
          FLAKE_INSTALL_LOG="${FLAKE_INSTALL_LOG_CONTENT:-No relevant log messages.}"
          
          # Build status message based on environment variables set from exit codes
          CHECK_EMOJI="${{ env.FLAKE_CHECK_STATUS == 'passed' && '✅' || '❌' }}"
          INSTALL_EMOJI="${{ env.FLAKE_INSTALL_STATUS == 'passed' && '✅' || '❌' }}"
          
          # Overall status emoji
          OVERALL_EMOJI="❌"
          if [[ "${{ env.FLAKE_CHECK_STATUS }}" == "passed" && "${{ env.FLAKE_INSTALL_STATUS }}" == "passed" ]]; then
            OVERALL_EMOJI="✅"
          fi

          MESSAGE="$OVERALL_EMOJI Flake checks for $REPO_NAME on branch $BRANCH_NAME:%0A$CHECK_EMOJI Flake check: ${{ env.FLAKE_CHECK_STATUS }} (Exit Code: ${{ env.FLAKE_CHECK_EXIT_CODE }})%0A$INSTALL_EMOJI Flake install: ${{ env.FLAKE_INSTALL_STATUS }} (Exit Code: ${{ env.FLAKE_INSTALL_EXIT_CODE }})"

          MESSAGE+="%0A%0A<b>Flake Check Log (Filtered):</b>%0A<pre>$FLAKE_CHECK_LOG</pre>"
          MESSAGE+="%0A%0A<b>Flake Install Log (Filtered):</b>%0A<pre>$FLAKE_INSTALL_LOG</pre>"
          MESSAGE+="%0A%0AGenerated on $(TZ='Asia/Kolkata' date)"

          # Ensure message length does not exceed Telegram limit (approx 4096 bytes)
          # This basic check truncates if necessary, more robust handling might be needed for very long logs
          MAX_LENGTH=4000
          if [ ${#MESSAGE} -gt $MAX_LENGTH ]; then
             MESSAGE="${MESSAGE:0:$MAX_LENGTH}... (truncated)"
          fi


          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -d "chat_id=$CHAT_ID" \
            -d "text=$MESSAGE" \
            -d "parse_mode=HTML"


      # This step will fail if any of the flake operations had a non-zero exit code
      # This is determined by the WORKFLOW_SHOULD_FAIL environment variable.
      - name: Fail Workflow If Errors Detected
        if: env.WORKFLOW_SHOULD_FAIL == 'true'
        run: |
          echo "One or more Nix commands failed. See previous steps for details."
          exit 1